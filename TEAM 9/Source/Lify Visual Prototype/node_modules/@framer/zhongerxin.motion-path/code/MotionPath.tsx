import * as React from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    useMotionValue,
    transform,
    Stack,
} from "framer"

// Open Preview: Command + P
// Learn more: https://framer.com/api

export function MotionPath(props) {
    const {
        playState,
        children,
        content,
        duration,
        playCounts,
        curve,
        rotation,
        width,
        height,
        ...rest
    } = props
    const dom = React.useRef()
    const [position, setPosition] = React.useState({ x: 0, y: 0 })
    const [rotate, setRotate] = React.useState(0)
    // const [start, setstart] = React.useState(playState)

    let totalLength = 0
    let initPosition = { x: 0, y: 0 }
    let prePosition = initPosition
    let curPosition = initPosition
    let step = 0
    let path
    let counts = 1

    let graphicSize = { width: 0, height: 0 }
    let svgPosition = { x: 0, y: 0 }

    const requestRef = React.useRef(null)

    const curveOut = t => {
        switch (curve) {
            case "linear":
                return t
            case "ease-in":
                return t * t * t
            case "ease-out":
                return --t * t * t + 1
            case "ease-in-out":
                return t < 0.5
                    ? 4 * t * t * t
                    : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1
        }
    }

    const getRotate = (start, end) => {
        const diff_x = start.x - end.x
        const diff_y = start.y - end.y
        return Math.atan2(diff_y, diff_x) * (180 / Math.PI) - 90
    }

    const getPosition = position => {
        const x =
            position.x - 10 + (width - graphicSize.width) / 2 + svgPosition.x
        const y =
            position.y - 10 + (height - graphicSize.height) / 2 + svgPosition.y
        return { x: x, y: y }
    }

    const pointStep = transform(step, [0, 2], [1, 0])

    const looper = () => {
        requestRef.current = requestAnimationFrame(looper)
        if (counts > 0 && playState) {
            const curPosition = path.getPointAtLength(
                curveOut(step / totalLength) * totalLength
            )
            if (rotation) {
                const curRotate = getRotate(prePosition, curPosition)
                setRotate(curRotate)
            }
            setPosition(getPosition(curPosition))
            prePosition = curPosition
            step += totalLength / (duration * 60)
            if (step > totalLength) {
                step = 0
                counts -= 1
            }
        }
    }

    const getPath = () => {
        const graphicProps = children[0].props
        const svgFrame = children[0].props.children[0].props.frame
        counts = playCounts
        graphicSize = { width: graphicProps.width, height: graphicProps.height }
        svgPosition = { x: svgFrame.x, y: svgFrame.y }
        // @ts-ignore
        path = dom.current.childNodes[0].childNodes[0].childNodes[0]
        // console.log("222")
        totalLength = path.getTotalLength()
        initPosition = path.getPointAtLength(0)
        if (rotation) {
            const curRotate = getRotate(initPosition, path.getPointAtLength(1))
            setRotate(curRotate)
        } else {
            setRotate(0)
        }
        setPosition(getPosition(initPosition))
    }

    React.useEffect(() => {
        if (
            React.Children.count(children) > 0 &&
            React.Children.count(content) > 0
        ) {
            getPath()
            looper()
        }
        return () => {
            cancelAnimationFrame(requestRef.current)
            if (
                React.Children.count(children) > 0 &&
                React.Children.count(content) > 0
            ) {
                setTimeout(() => {
                    getPath()
                }, 100)
            }
            counts = 0
        }
    }, [children, content, duration, playState, playCounts])

    const SVG = () => {
        if (
            React.Children.count(children) > 0 &&
            React.Children.count(content) > 0
        ) {
            const child = React.cloneElement(children[0], {
                id: "path",
                position: "relative",
            })
            return child
        } else
            return (
                <Frame
                    width={"100%"}
                    height={"100%"}
                    background="rgba(136, 85, 255, 0.1)"
                    style={{
                        justifyContent: "center",
                        textAlign: "center",
                        color: "#8855FF",
                        overflow: "hidden",
                        fontSize: 20,
                        fontWeight: 600,
                    }}
                >
                    Connect Path and Content
                </Frame>
            )
    }

    const Content = () => {
        return (
            <Stack
                size={20}
                background={" "}
                radius={"10%"}
                x={position.x}
                y={position.y}
                rotate={rotate}
                distribution="center"
            >
                {content}
            </Stack>
        )
    }

    return (
        <Frame
            {...rest}
            width={width}
            height={height}
            overflow="visible"
            background={" "}
            onTap={() => {
                // setstart(true)
            }}
        >
            <Frame
                ref={dom}
                width={"100%"}
                height={"100%"}
                background={" "}
                style={{
                    display: "flex",
                    placeItems: "center",
                    placeContent: "center",
                }}
            >
                <SVG />
            </Frame>
            <Content />
        </Frame>
    )
}

MotionPath.defaultProps = {
    height: 400,
    width: 400,
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(MotionPath, {
    playState: {
        type: ControlType.Boolean,
        title: "palyState",
        defaultValue: true,
        enabledTitle: "Play",
        disabledTitle: "Stop",
    },
    children: {
        type: ControlType.ComponentInstance,
        title: "path",
    },
    content: {
        type: ControlType.ComponentInstance,
        title: "content",
    },
    duration: {
        type: ControlType.Number,
        title: "duration",
        defaultValue: 2,
        min: 0.1,
        max: 100,
        unit: "s",
        step: 0.1,
        displayStepper: true,
    },
    playCounts: {
        type: ControlType.Number,
        title: "playCounts",
        defaultValue: 1,
        min: 0,
        max: 1000,
        step: 1,
        displayStepper: true,
    },
    curve: {
        title: "curve",
        type: ControlType.Enum,
        defaultValue: "linear",
        options: ["linear", "ease-in", "ease-out", "ease-in-out"],
        optionTitles: ["Linear", "Ease In", "Ease Out", "Ease In Out"],
    },
    rotation: {
        type: ControlType.Boolean,
        title: "rotation",
        defaultValue: true,
        enabledTitle: "Enable",
        disabledTitle: "Disable",
    },
})
