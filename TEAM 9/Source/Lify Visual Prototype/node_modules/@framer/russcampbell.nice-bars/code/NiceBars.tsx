import * as React from "react";
import { PropertyControls, ControlType } from "framer";

var arrayOfDates = function(count) {
  var datesArray = [];
  for(var d=1; d<count+1; d++) {
    datesArray.push(new Date(new Date().getTime() - ((24*d)*60*60*1000)))
  }
  return datesArray.reverse();
}

const style: React.CSSProperties = {
  overflow: "hidden",
  height: "100%",
  display: "flex",
  flexDirection: "column",
};

const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

// Define type of property
interface Props {
  text: string;
  width: number;
  height: number;
  padding: number;
  barColor: string;
  numberOfBars: number;
}

export class NiceBars extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    height: 130,
    barColor: "#5983F0",
    padding: 5,
    numberOfBars: 7,
    labelStyle: "dayLetter",
    labelColor: "#777777"
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    barColor: { type: ControlType.Color, title: "Bar Color"},
    numberOfBars: { type: ControlType.Number, title: "Bar Count"},
    labelStyle: {
      type: ControlType.Enum,
      title: "Label Style",
      options: ["none", "dayFull", "dayShort", "dayLetter", "dayMonth"],
      optionTitles: ["None", "Monday", "Mon", "M", "9/1"],
    },
    labelColor: { type: ControlType.Color, title: "Label Color"},
  };

  constructor(props) {
      super(props)
      
      this.state = {
          data: Array.from({length: this.props.numberOfBars}, () => Math.floor(Math.random() * 16)),
          dates: arrayOfDates(this.props.numberOfBars)
      }
  }

  static getDerivedStateFromProps(props, state) {
      if (state.data.length === props.numberOfBars){return {data: state.data}}
      return {
        data: Array.from({length: props.numberOfBars}, () => Math.floor(Math.random() * 16)),
        dates: arrayOfDates(props.numberOfBars)
      }
  }

  renderDateLabel(index, labelStyletyle, dates) {
    switch (labelStyletyle) {
      case "dayFull":
        return weekdays[dates[index].getDay()];
      case "dayShort":
        return weekdays[dates[index].getDay()].substring(0,3);
      case "dayLetter":
        return weekdays[dates[index].getDay()].substring(0,1);
      case "dayMonth":
        return dates[index].getMonth() + "/" + dates[index].getDay();
      default:
        return ""
    }
  }

  render() {
    const {data, dates} = this.state;
    const xAxislabelStylepace = 20;
    const headerHeight = this.props.padding;
    const maxBarHeight =
      this.props.height -
      (headerHeight +
        this.props.padding +
        3 +
        xAxislabelStylepace);
    const maxValue = Math.max.apply(null, data.map(g => g));

    const maxBarWidth = 10;
    const maxGraphWidth = this.props.width - this.props.padding * 2;
    const columnWidth = maxGraphWidth / data.length;
    const barWidth = Math.min(columnWidth - 2, maxBarWidth);

    return (
      <div style={style}>
        <div
          style={{
            color: "black",
            paddingLeft: this.props.padding,
            paddingTop: this.props.padding,
            height: { headerHeight } + "px",
            borderWidth: 1,
            borderColor: "black",
          }}
        >
          {this.props.text}
        </div>
        <svg
          width={this.props.width}
          height={this.props.height - headerHeight}
          style={{
            paddingLeft: this.props.padding,
            paddingRight: this.props.padding
          }}
          xmlns="http://www.w3.org/2000/svg"
        >
          {data.map((value, index) => (
            <svg x={index * columnWidth} y="0">
              <rect
                x={columnWidth / 2 - barWidth / 2}
                y={(maxBarHeight - maxBarHeight * (value / maxValue))}
                width={barWidth}
                height={maxBarHeight * (value / maxValue)}
                fill={this.props.barColor}
                rx={barWidth / 2}
              />
              <text
                fill={this.props.labelColor}
                x={columnWidth / 2}
                y={this.props.height - headerHeight - (this.props.padding + 5)}
                fontSize="12"
                textAnchor="middle"
              >
                {this.renderDateLabel(index, this.props.labelStyle, dates)}
              </text>
            </svg>
          ))}
        </svg>
      </div>
    );
  }
}
